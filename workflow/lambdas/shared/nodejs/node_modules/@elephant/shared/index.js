/**
 * @module @elephant/shared
 * @description Shared utilities and functions for Elephant Lambda functions
 */

import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
import { DynamoDBDocumentClient, PutCommand, QueryCommand, UpdateCommand } from '@aws-sdk/lib-dynamodb';
import { createHash } from 'crypto';

// Re-export all DynamoDB functions
export * from './dynamoDb.js';

// Re-export all reprocessing functions
export * from './reprocessing.js';

// Initialize DynamoDB clients
const client = new DynamoDBClient({});
const docClient = DynamoDBDocumentClient.from(client);

/**
 * Creates a standardized log entry with component and timestamp
 * @function createLogEntry
 * @param {string} component - The component name (e.g., 'post', 'pre', 'starter')
 * @param {string} level - Log level ('info', 'error', 'debug')
 * @param {string} msg - Short message identifier
 * @param {Record<string, unknown>} [details] - Additional details to include
 * @returns {{component: string, level: string, msg: string, timestamp: string, [key: string]: unknown}} Structured log entry
 * @example
 * import { createLogEntry } from '@elephant/shared';
 * const logEntry = createLogEntry('post', 'info', 'processing_started', { count: 5 });
 * // Returns: { component: 'post', level: 'info', msg: 'processing_started', timestamp: '2024-...', count: 5 }
 */
export function createLogEntry(component, level, msg, details = {}) {
    return {
        component,
        level,
        msg,
        timestamp: new Date().toISOString(),
        ...details
    };
}
