Comment: Elephant Express workflow. Triggered by Starter Lambda with one SQS message payload.
StartAt: Preprocess
States:
  Preprocess:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: ${WorkflowPreProcessorFunction}
      Payload.$: $.message
    # Store full Lambda invoke result under $.pre so we can shape it next
    ResultSelector:
      county_prep_input_s3_uri.$: $.Payload.county_prep_input_s3_uri
      output_prefix.$: $.Payload.output_prefix
      seed_output_s3_uri.$: $.Payload.seed_output_s3_uri
      county_name.$: $.Payload.county_name
      county_key.$: $.Payload.county_key
    ResultPath: $.pre
    Next: BuildRepairParamName
    Retry:
      - ErrorEquals:
          [
            Lambda.ServiceException,
            Lambda.AWSLambdaException,
            Lambda.SdkClientException,
          ]
        IntervalSeconds: 2
        MaxAttempts: 2
        BackoffRate: 2
    Catch:
      - ErrorEquals: [States.ALL]
        ResultPath: $.error
        Next: FailRuntime

  BuildRepairParamName:
    Type: Pass
    Parameters:
      stack_name: ${StackName}
      repairParam.$: 'States.Format("/{}/repair/{}", $.stack_name, $.pre.county_key)'
    ResultPath: $.repair
    Next: GetCountyRepairFlag

  GetCountyRepairFlag:
    Type: Task
    Resource: arn:aws:states:::aws-sdk:ssm:getParameter
    Parameters:
      Name.$: $.repair.repairParam
      WithDecryption: false
    ResultPath: $.countyRepair
    Next: ShouldAttemptSkip
    Catch:
      - ErrorEquals: [States.ALL]
        ResultPath: $.countyRepair
        Next: DefaultRepairFalse

  DefaultRepairFalse:
    Type: Pass
    Parameters:
      Parameter:
        Value: "false"
    ResultPath: $.countyRepair
    Next: ShouldAttemptSkip

  ShouldAttemptSkip:
    Type: Choice
    Choices:
      - Variable: $.countyRepair.Parameter.Value
        StringEquals: "true"
        Next: BuildHeadParams
    Default: Prepare

  BuildHeadParams:
    Type: Pass
    QueryLanguage: JSONata
    Comment: "Parse pre.output_prefix (s3://bucket/prefix) to derive bucket, key (prefix/output.zip), and expectedOutputUri"
    Output: >-
      {%
        {
          "head": {
            "bucket": $split($split($states.input.pre.output_prefix, "s3://")[1], "/")[0],
            "key": $substringAfter($prefix, "s3://" & $bucket & "/") & '/output.zip',
            "expectedOutputUri": $states.input.pre.output_prefix & '/output.zip'
          }
        }
      %}
    Next: HeadOutputZip

  HeadOutputZip:
    Type: Task
    Resource: arn:aws:states:::aws-sdk:s3:headObject
    Parameters:
      Bucket.$: $.head.bucket
      Key.$: $.head.key
    ResultPath: $.headResult
    Next: BypassPrepare
    Catch:
      - ErrorEquals: [States.ALL]
        ResultPath: $.headError
        Next: Prepare

  BypassPrepare:
    Type: Pass
    Parameters:
      output_s3_uri.$: $.head.expectedOutputUri
    ResultPath: $.prepare
    Next: Postprocess

  Prepare:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: ${DownloaderFunction}
      Payload:
        input_s3_uri.$: $.pre.county_prep_input_s3_uri
        output_s3_uri_prefix.$: $.pre.output_prefix
        browser: true
    ResultSelector:
      output_s3_uri.$: $.Payload.output_s3_uri
    ResultPath: $.prepare
    Next: Postprocess
    Retry:
      - ErrorEquals:
          [
            Lambda.ServiceException,
            Lambda.AWSLambdaException,
            Lambda.SdkClientException,
          ]
        IntervalSeconds: 5
        MaxAttempts: 3
        BackoffRate: 2
    Catch:
      - ErrorEquals: [States.ALL]
        ResultPath: $.error
        Next: FailRuntime

  Postprocess:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: ${WorkflowPostProcessorFunction}
      Payload:
        s3.$: $.message.s3
        prepare.$: $.prepare
        seed_output_s3_uri.$: $.pre.seed_output_s3_uri
    ResultSelector:
      items.$: $.Payload.transactionItems
    ResultPath: $.post
    Next: QueueForTheSubmit
    Retry:
      - ErrorEquals:
          [
            Lambda.ServiceException,
            Lambda.AWSLambdaException,
            Lambda.SdkClientException,
          ]
        IntervalSeconds: 5
        MaxAttempts: 2
        BackoffRate: 2
    Catch:
      - ErrorEquals: [States.ALL]
        ResultPath: $.error
        Next: FailRuntime

  QueueForTheSubmit:
    Type: Task
    Resource: arn:aws:states:::sqs:sendMessage
    Parameters:
      QueueUrl: ${TransactionsSqsQueueUrl}
      MessageBody.$: "States.JsonToString($.post.items)"
    ResultPath: null
    End: true

  FailRuntime:
    Type: Fail
    Error: WorkflowFailed
    Cause: A task failed. See error field.
