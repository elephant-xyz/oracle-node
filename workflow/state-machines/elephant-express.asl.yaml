Comment: Elephant Express workflow. Triggered by Starter Lambda with one SQS message payload.
StartAt: Preprocess
States:
  Preprocess:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: ${WorkflowPreProcessorFunction}
      Payload.$: $
    # Store full Lambda invoke result under $.pre so we can shape it next
    ResultPath: $.pre
    Next: ShapeForPrepare
    Retry:
      - ErrorEquals:
          [
            Lambda.ServiceException,
            Lambda.AWSLambdaException,
            Lambda.SdkClientException,
          ]
        IntervalSeconds: 2
        MaxAttempts: 2
        BackoffRate: 2
    Catch:
      - ErrorEquals: [States.ALL]
        ResultPath: $.error
        Next: RequeueOnFailure

  ShapeForPrepare:
    Type: Pass
    Parameters:
      county_prep_input_s3_uri.$: $.pre.Payload.county_prep_input_s3_uri
      output_prefix.$: $.pre.Payload.output_prefix
      seed_output_s3_uri.$: $.pre.Payload.seed_output_s3_uri
      # Preserve original S3 event Records for later requeue and logging
      Records.$: $.Records
    Next: Prepare

  Prepare:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: ${DownloaderFunction}
      Payload:
        input_s3_uri.$: $.county_prep_input_s3_uri
        output_s3_uri_prefix.$: $.output_prefix
        browser: true
    ResultPath: $.prepare
    Next: ShapeForPost
    Retry:
      - ErrorEquals:
          [
            Lambda.ServiceException,
            Lambda.AWSLambdaException,
            Lambda.SdkClientException,
          ]
        IntervalSeconds: 5
        MaxAttempts: 3
        BackoffRate: 2
    Catch:
      - ErrorEquals: [States.ALL]
        ResultPath: $.error
        Next: RequeueOnFailure

  ShapeForPost:
    Type: Pass
    Parameters:
      # Keep only what Postprocess needs
      prepare.$: $.prepare.Payload
      seed_output_s3_uri.$: $.seed_output_s3_uri
      Records.$: $.Records
    Next: Postprocess

  Postprocess:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: ${WorkflowPostProcessorFunction}
      Payload:
        input:
          Records.$: $.Records
        # Also include Records at top-level for existing handler references
        Records.$: $.Records
        prepare.$: $.prepare
        seed_output_s3_uri.$: $.seed_output_s3_uri
    # Discard Lambda result; we only need to requeue original Records
    ResultPath: null
    OutputPath: "$.Records"
    Next: RequeueOnSuccess
    Retry:
      - ErrorEquals:
          [
            Lambda.ServiceException,
            Lambda.AWSLambdaException,
            Lambda.SdkClientException,
          ]
        IntervalSeconds: 5
        MaxAttempts: 2
        BackoffRate: 2
    Catch:
      - ErrorEquals: [States.ALL]
        ResultPath: $.error
        Next: RequeueOnFailure

  RequeueOnSuccess:
    Type: Task
    Resource: arn:aws:states:::sqs:sendMessage
    Parameters:
      QueueUrl: ${WorkflowSqsQueueUrl}
      MessageBody.$: States.JsonToString($[0])
    ResultPath: null
    End: true

  RequeueOnFailure:
    Type: Task
    Resource: arn:aws:states:::sqs:sendMessage
    Parameters:
      QueueUrl: ${WorkflowSqsQueueUrl}
      MessageBody.$: States.JsonToString($.Records[0])
    ResultPath: null
    Next: FailRuntime

  FailRuntime:
    Type: Fail
    Error: WorkflowFailed
    Cause: A task failed. See error field.
