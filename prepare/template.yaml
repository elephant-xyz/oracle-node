AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Unified SAM template defining downloader/updater Lambdas + AWS Step Functions (Express) workflow with SQS and Lambda

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: MWAAEnvironment

  # Parameters for new Step Functions workflow (replaces Airflow UI variables as deployment inputs)
  ElephantDomain:
    Description: Elephant API domain for submit step
    Type: String
    Default: ""
  ElephantApiKey:
    Description: Elephant API key
    Type: String
    NoEcho: true
    Default: ""
  ElephantOracleKeyId:
    Description: Elephant oracle key id
    Type: String
    Default: ""
  ElephantFromAddress:
    Description: From address for blockchain submission
    Type: String
    Default: ""
  ElephantRpcUrl:
    Description: RPC URL for blockchain submission
    Type: String
    Default: ""
  ElephantPinataJwt:
    Description: Pinata JWT for uploads
    Type: String
    NoEcho: true
    Default: ""
  ElephantKeystoreS3Key:
    Description: S3 key for keystore JSON file (when using keystore mode)
    Type: String
    Default: ""
  ElephantKeystorePassword:
    Description: Password for keystore file (when using keystore mode)
    Type: String
    NoEcho: true
    Default: ""
  WorkflowQueueName:
    Description: Name for the Step Functions SQS trigger queue
    Type: String
    Default: elephant-workflow-queue
  WorkflowStarterReservedConcurrency:
    Description: Max concurrent SQS messages to process via EventSourceMapping ScalingConfig
    Type: Number
    Default: 100
  WorkflowStateMachineName:
    Description: Name for the Express Step Functions state machine
    Type: String
    Default: ElephantExpressWorkflow

  # Prepare function flags (only applied if set to 'true')
  ElephantPrepareUseBrowser:
    Description: Force browser mode for prepare function
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  ElephantPrepareNoFast:
    Description: Disable fast mode for prepare function
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  ElephantPrepareNoContinue:
    Description: Disable continue mode for prepare function
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"

Globals:
  Function:
    Runtime: nodejs22.x
    Timeout: 300
    Tracing: Active

Resources:
  #####################################################################################################################
  # EnvironmentBucket
  #####################################################################################################################

  EnvironmentBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOutputs
            Status: Enabled
            ExpirationInDays: 14
            Filter:
              Prefix: outputs/
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  EnvironmentBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref EnvironmentBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowDownloaderLambdaAccess
            Effect: Allow
            Principal:
              AWS: !GetAtt DownloaderFunctionRole.Arn
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:ListBucket
            Resource:
              - !GetAtt EnvironmentBucket.Arn
              - !Sub "${EnvironmentBucket.Arn}/*"

  #####################################################################################################################
  # SQS (DLQ + primary) + QueuePolicy for S3 events
  #####################################################################################################################

  MwaaDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 300
      SqsManagedSseEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  MwaaSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt MwaaDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  MwaaSqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref MwaaSqsQueue
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowS3ToSendMessage
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt MwaaSqsQueue.Arn

  #####################################################################################################################
  # Serverless Functions
  #####################################################################################################################
  DownloaderFunction:
    Type: AWS::Serverless::Function
    Properties:
      EphemeralStorage:
        Size: 1024
      MemorySize: 768
      CodeUri: lambdas/downloader
      Handler: index.handler
      Description: "Downloads data (granted full S3 access as requested)"
      Environment:
        Variables:
          ELEPHANT_PREPARE_USE_BROWSER: !Ref ElephantPrepareUseBrowser
          ELEPHANT_PREPARE_NO_FAST: !Ref ElephantPrepareNoFast
          ELEPHANT_PREPARE_NO_CONTINUE: !Ref ElephantPrepareNoContinue
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  UpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: lambdas/updater
      Handler: index.handler
      Description: "Updates env var on DownloaderFunction and runs every minute."
      Environment:
        Variables:
          TARGET_FUNCTION_NAME: !Ref DownloaderFunction
          VAR_NAME: DEPLOY_TS
      Policies:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - lambda:GetFunctionConfiguration
                - lambda:UpdateFunctionConfiguration
              Resource: !GetAtt DownloaderFunction.Arn
      Events:
        UpdateSchedule:
          Type: Schedule
          Properties:
            Name: UpdateDownloaderEveryMinute
            Description: "Invoke updater every minute to refresh env var."
            Schedule: "cron(* * * * ? *)"
            Enabled: true

  # Persist the DownloaderFunction ARN to SSM for Airflow to consume
  DownloaderFunctionArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${AWS::StackName}/downloader-function-arn"
      Type: String
      Value: !GetAtt DownloaderFunction.Arn
      Description: ARN of the downloader Lambda function for MWAA

  #####################################################################################################################
  # SQS (Workflow queue + DLQ for Step Functions trigger)
  #####################################################################################################################

  WorkflowDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 331
      SqsManagedSseEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  WorkflowSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref WorkflowQueueName
      VisibilityTimeout: 331
      MessageRetentionPeriod: 1209600
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WorkflowDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  TransactionsSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 331
      MessageRetentionPeriod: 1209600
      SqsManagedSseEnabled: true
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt TransactionsDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  TransactionsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 331
      SqsManagedSseEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName

  #####################################################################################################################
  # Workflow Lambdas (starter -> pre -> prepare -> post)
  #####################################################################################################################

  SubmitterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      MemorySize: 256
      Timeout: 300
      EphemeralStorage:
        Size: 1024
      CodeUri: ../workflow/lambdas/submit/
      Handler: index.handler
      Description: "Submits data to the blockchain"
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "${EnvironmentBucket.Arn}/keystores/*"
      Environment:
        Variables:
          ELEPHANT_DOMAIN: !Ref ElephantDomain
          ELEPHANT_API_KEY: !Ref ElephantApiKey
          ELEPHANT_ORACLE_KEY_ID: !Ref ElephantOracleKeyId
          ELEPHANT_FROM_ADDRESS: !Ref ElephantFromAddress
          ELEPHANT_RPC_URL: !Ref ElephantRpcUrl
          ELEPHANT_KEYSTORE_S3_KEY: !Ref ElephantKeystoreS3Key
          ELEPHANT_KEYSTORE_PASSWORD: !Ref ElephantKeystorePassword
          ENVIRONMENT_BUCKET: !Ref EnvironmentBucket
      Events:
        Submit:
          Type: SQS
          Properties:
            Queue: !GetAtt TransactionsSqsQueue.Arn
            BatchSize: 150
            MaximumBatchingWindowInSeconds: 300
            ScalingConfig:
              MaximumConcurrency: 2

  WorkflowStarterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 330
      CodeUri: ../workflow/lambdas/starter
      Handler: index.handler
      Description: "SQS-triggered starter that sync-starts the Express state machine"
      Policies:
        - AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - states:StartSyncExecution
              Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${WorkflowStateMachineName}"
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${WorkflowStateMachineName}"
      Events:
        SqsEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WorkflowSqsQueue.Arn
            BatchSize: 1
            MaximumBatchingWindowInSeconds: 0
            ScalingConfig:
              MaximumConcurrency: !Ref WorkflowStarterReservedConcurrency

  WorkflowPreProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      MemorySize: 512
      Timeout: 300
      EphemeralStorage:
        Size: 1024
      CodeUri: ../workflow/lambdas/pre
      Handler: index.handler
      Description: "Prepares seed output and input.zip for prepare step"
      Policies:
        - AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - S3CrudPolicy:
            BucketName: !Ref EnvironmentBucket
      Environment:
        Variables:
          OUTPUT_BASE_URI: !Sub "s3://${EnvironmentBucket}/outputs"

  WorkflowPostProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - arm64
      MemorySize: 512
      Timeout: 120
      EphemeralStorage:
        Size: 2048
      CodeUri: ../workflow/lambdas/post
      Handler: index.handler
      Description: "Performs county transform, hash, upload, and submit"
      Policies:
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref EnvironmentBucket
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Environment:
        Variables:
          OUTPUT_BASE_URI: !Sub "s3://${EnvironmentBucket}/outputs"
          ELEPHANT_DOMAIN: !Ref ElephantDomain
          ELEPHANT_API_KEY: !Ref ElephantApiKey
          ELEPHANT_ORACLE_KEY_ID: !Ref ElephantOracleKeyId
          ELEPHANT_FROM_ADDRESS: !Ref ElephantFromAddress
          ELEPHANT_RPC_URL: !Ref ElephantRpcUrl
          ELEPHANT_PINATA_JWT: !Ref ElephantPinataJwt

  #####################################################################################################################
  # Express Step Functions State Machine (separate definition file)
  #####################################################################################################################

  ElephantExpressStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Ref WorkflowStateMachineName
      Type: EXPRESS
      DefinitionUri: ../workflow/state-machines/elephant-express.asl.yaml
      DefinitionSubstitutions:
        WorkflowPreProcessorFunction: !GetAtt WorkflowPreProcessorFunction.Arn
        DownloaderFunction: !GetAtt DownloaderFunction.Arn
        WorkflowPostProcessorFunction: !GetAtt WorkflowPostProcessorFunction.Arn
        WorkflowSqsQueueUrl: !Ref WorkflowSqsQueue
        TransactionsSqsQueueUrl: !Ref TransactionsSqsQueue
      Role: !GetAtt ElephantExpressStateMachineRole.Arn
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt ElephantExpressLogGroup.Arn
        IncludeExecutionData: true
        Level: ALL
      Tracing:
        Enabled: true

  ElephantExpressLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/vendedlogs/states/${WorkflowStateMachineName}"
      RetentionInDays: 14

  ElephantExpressStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      Policies:
        - PolicyName: ElephantExpressInline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt WorkflowPreProcessorFunction.Arn
                  - !GetAtt DownloaderFunction.Arn
                  - !GetAtt WorkflowPostProcessorFunction.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource:
                  - !GetAtt WorkflowSqsQueue.Arn
                  - !GetAtt TransactionsSqsQueue.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"

  #####################################################################################################################
  # Step Function for S3 to SQS processing
  #####################################################################################################################

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Path: "/service-role/"
      Policies:
        - PolicyName: StepFunctionS3SqsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                Resource:
                  - !GetAtt EnvironmentBucket.Arn
                  - !Sub "${EnvironmentBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                Resource:
                  - !GetAtt MwaaSqsQueue.Arn
                  - !GetAtt WorkflowSqsQueue.Arn
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${AWS::StackName}-*"
              # Required for states:startExecution.sync to create the managed EventBridge rule
              - Effect: Allow
                Action:
                  - events:PutRule
                  - events:PutTargets
                  - events:DescribeRule
                  - events:DeleteRule
                  - events:RemoveTargets
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/StepFunctionsGetEventsForStepFunctionsExecutionRule"

  # Child state machine: processes a single page starting after a given key and maps to SQS
  S3PageProcessorStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-S3PageProcessor"
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: |
        {
          "Comment": "Process one S3 page (MaxKeys=1000) starting after StartAfter and send SQS messages",
          "StartAt": "BranchList",
          "States": {
            "BranchList": {
              "Type": "Choice",
              "Choices": [
                { "Variable": "$.continuationToken", "IsPresent": true, "Next": "ListPageWithToken" },
                { "Variable": "$.startAfter", "IsPresent": true, "Next": "ListPageWithStartAfter" }
              ],
              "Default": "ListPageNoStartAfter"
            },
            "ListPageWithToken": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
              "Parameters": {
                "Bucket.$": "$.bucketName",
                "MaxKeys": 1000,
                "ContinuationToken.$": "$.continuationToken"
              },
              "ResultPath": "$.list",
              "Next": "ProcessOrDone",
              "Retry": [
                { "ErrorEquals": ["States.TaskFailed", "S3.NoSuchBucket", "S3.AccessDenied"], "IntervalSeconds": 2, "MaxAttempts": 3, "BackoffRate": 2.0 }
              ],
              "Catch": [
                { "ErrorEquals": ["States.ALL"], "ResultPath": "$.errorInfo", "Next": "ReturnEmpty" }
              ]
            },
            "ListPageNoStartAfter": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
              "Parameters": {
                "Bucket.$": "$.bucketName",
                "MaxKeys": 1000
              },
              "ResultPath": "$.list",
              "Next": "ProcessOrDone",
              "Retry": [
                {
                  "ErrorEquals": ["States.TaskFailed", "S3.NoSuchBucket", "S3.AccessDenied"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3,
                  "BackoffRate": 2.0
                }
              ],
              "Catch": [
                {
                  "ErrorEquals": ["States.ALL"],
                  "ResultPath": "$.errorInfo",
                  "Next": "ReturnEmpty"
                }
              ]
            },
            "ListPageWithStartAfter": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:s3:listObjectsV2",
              "Parameters": {
                "Bucket.$": "$.bucketName",
                "MaxKeys": 1000,
                "StartAfter.$": "$.startAfter"
              },
              "ResultPath": "$.list",
              "Next": "ProcessOrDone",
              "Retry": [
                { "ErrorEquals": ["States.TaskFailed", "S3.NoSuchBucket", "S3.AccessDenied"], "IntervalSeconds": 2, "MaxAttempts": 3, "BackoffRate": 2.0 }
              ],
              "Catch": [
                { "ErrorEquals": ["States.ALL"], "ResultPath": "$.errorInfo", "Next": "ReturnEmpty" }
              ]
            },
            "ProcessOrDone": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.list.Contents",
                  "IsPresent": true,
                  "Next": "MapObjects"
                }
              ],
              "Default": "ReturnEmpty"
            },
            "MapObjects": {
              "Type": "Map",
              "MaxConcurrency": 0,
              "ItemsPath": "$.list.Contents",
              "Iterator": {
                "StartAt": "CreateMessage",
                "States": {
                  "CreateMessage": {
                    "Type": "Pass",
                    "Parameters": {
                      "s3": {
                        "bucket": { "name.$": "$$.Execution.Input.bucketName" },
                        "object": { "key.$": "$.Key" }
                      }
                    },
                    "ResultPath": "$.message",
                    "Next": "SendToSQS"
                  },
                  "SendToSQS": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::sqs:sendMessage",
                    "Parameters": {
                      "QueueUrl.$": "$$.Execution.Input.sqsQueueUrl",
                      "MessageBody.$": "States.JsonToString($.message)"
                    },
                    "ResultPath": "$.sqsResult",
                    "Next": "Success",
                    "Retry": [
                      {
                        "ErrorEquals": ["States.TaskFailed", "SQS.QueueDoesNotExist", "SQS.InvalidMessageContents"],
                        "IntervalSeconds": 1,
                        "MaxAttempts": 3,
                        "BackoffRate": 2.0
                      },
                      { "ErrorEquals": ["States.Timeout"], "IntervalSeconds": 3, "MaxAttempts": 2, "BackoffRate": 1.5 }
                    ],
                    "Catch": [
                      { "ErrorEquals": ["States.ALL"], "ResultPath": "$.errorInfo", "Next": "LogError" }
                    ]
                  },
                  "LogError": { "Type": "Pass", "Result": { "status": "error" }, "End": true },
                  "Success": { "Type": "Pass", "Result": { "status": "processed" }, "End": true }
                }
              },
              "ResultPath": "$.processed",
              "Next": "ReturnResult",
              "Catch": [
                { "ErrorEquals": ["States.TaskFailed", "States.MapRunFailed"], "ResultPath": "$.mapError", "Next": "ReturnResult" }
              ]
            },
            "ReturnEmpty": {
              "Type": "Pass",
              "Result": { "nextToken": null, "count": 0, "isTruncated": false },
              "End": true
            },
            "ReturnResult": {
              "Type": "Choice",
              "Choices": [
                {
                  "Variable": "$.list.NextContinuationToken",
                  "IsPresent": true,
                  "Next": "ReturnWithToken"
                }
              ],
              "Default": "ReturnWithoutToken"
            },
            "ReturnWithToken": {
              "Type": "Pass",
              "Parameters": {
                "nextToken.$": "$.list.NextContinuationToken",
                "count.$": "States.ArrayLength($.list.Contents)",
                "isTruncated.$": "$.list.IsTruncated"
              },
              "End": true
            },
            "ReturnWithoutToken": {
              "Type": "Pass",
              "Parameters": {
                "nextToken": null,
                "count.$": "States.ArrayLength($.list.Contents)",
                "isTruncated.$": "$.list.IsTruncated"
              },
              "End": true
            }
          }
        }

  # Parent/orchestrator state machine: loops child calls and recurses near history limit
  S3ToSqsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub "${AWS::StackName}-S3ToSqsProcessor"
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionSubstitutions:
        S3PageProcessorStateMachine: !Ref S3PageProcessorStateMachine
      DefinitionString: |
        {
          "Comment": "Orchestrate S3 pagination by invoking child per page; recurse at ~24.5k iterations",
          "StartAt": "InitBranch",
          "States": {
            "InitBranch": {
              "Type": "Choice",
              "Choices": [
                { "Variable": "$.continuationToken", "IsPresent": true, "Next": "InitWithToken" }
              ],
              "Default": "InitNoToken"
            },
            "InitWithToken": {
              "Type": "Pass",
              "Parameters": {
                "bucketName.$": "$.bucketName",
                "sqsQueueUrl.$": "$.sqsQueueUrl",
                "continuationToken.$": "$.continuationToken",
                "loopCount": 0
              },
              "ResultPath": "$.ctx",
              "Next": "ProcessPage"
            },
            "InitNoToken": {
              "Type": "Pass",
              "Parameters": {
                "bucketName.$": "$.bucketName",
                "sqsQueueUrl.$": "$.sqsQueueUrl",
                "continuationToken": null,
                "loopCount": 0
              },
              "ResultPath": "$.ctx",
              "Next": "ProcessPage"
            },
            "ProcessPage": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync",
              "Parameters": {
                "StateMachineArn": "${S3PageProcessorStateMachine}",
                "Input": {
                  "bucketName.$": "$.ctx.bucketName",
                  "sqsQueueUrl.$": "$.ctx.sqsQueueUrl",
                  "continuationToken.$": "$.ctx.continuationToken"
                }
              },
              "ResultSelector": {
                "parsed.$": "States.StringToJson($.Output)"
              },
              "ResultPath": "$.child",
              "Next": "UpdateForNext",
              "Retry": [
                { "ErrorEquals": ["States.TaskFailed"], "IntervalSeconds": 2, "MaxAttempts": 3, "BackoffRate": 2.0 }
              ],
              "Catch": [
                { "ErrorEquals": ["States.ALL"], "ResultPath": "$.errorInfo", "Next": "Done" }
              ]
            },
            "UpdateForNext": {
              "Type": "Pass",
              "Parameters": {
                "ctx": {
                  "bucketName.$": "$.ctx.bucketName",
                  "sqsQueueUrl.$": "$.ctx.sqsQueueUrl",
                  "continuationToken.$": "$.child.parsed.nextToken",
                  "loopCount.$": "States.MathAdd($.ctx.loopCount, 1)"
                },
                "hasMore.$": "$.child.parsed.isTruncated"
              },
              "ResultPath": "$.loop",
              "Next": "ContinueOrRecurse"
            },
            "ContinueOrRecurse": {
              "Type": "Choice",
              "Choices": [
                { "Variable": "$.loop.hasMore", "BooleanEquals": true, "Next": "CheckLimit" }
              ],
              "Default": "Done"
            },
            "CheckLimit": {
              "Type": "Choice",
              "Choices": [
                { "Variable": "$.loop.ctx.loopCount", "NumericLessThan": 25, "Next": "ProcessPageFromLoop" }
              ],
              "Default": "Recurse"
            },
            "ProcessPageFromLoop": {
              "Type": "Pass",
              "InputPath": "$.loop.ctx",
              "ResultPath": "$.ctx",
              "Next": "ProcessPage"
            },
            "Recurse": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution",
              "Parameters": {
                "StateMachineArn.$": "$$.StateMachine.Id",
                "Name.$": "States.UUID()",
                "Input": {
                  "bucketName.$": "$.loop.ctx.bucketName",
                  "sqsQueueUrl.$": "$.loop.ctx.sqsQueueUrl",
                  "continuationToken.$": "$.loop.ctx.continuationToken"
                }
              },
              "ResultPath": "$.restarted",
              "Next": "Done"
            },
            "Done": { "Type": "Pass", "End": true }
          }
        }

Outputs:
  DownloaderFunctionName:
    Description: Name of the downloader Lambda function
    Value: !Ref DownloaderFunction
  DownloaderFunctionArn:
    Description: ARN of the downloader Lambda function
    Value: !GetAtt DownloaderFunction.Arn
  UpdaterFunctionName:
    Description: Name of the updater Lambda function
    Value: !Ref UpdaterFunction
  UpdaterFunctionArn:
    Description: ARN of the updater Lambda function
    Value: !GetAtt UpdaterFunction.Arn
  EnvironmentBucketName:
    Description: S3 Bucket for MWAA Environment
    Value: !Ref EnvironmentBucket
  MwaaSqsQueueUrl:
    Description: URL of the MWAA SQS Queue
    Value: !Ref MwaaSqsQueue
  MwaaSqsQueueArn:
    Description: ARN of the MWAA SQS Queue
    Value: !GetAtt MwaaSqsQueue.Arn
  MwaaDeadLetterQueueUrl:
    Description: URL of the MWAA Dead Letter Queue
    Value: !Ref MwaaDeadLetterQueue
  MwaaDeadLetterQueueArn:
    Description: ARN of the MWAA Dead Letter Queue
    Value: !GetAtt MwaaDeadLetterQueue.Arn
  DownloaderFunctionArnParameterName:
    Description: SSM Parameter name containing DownloaderFunction ARN
    Value: !Ref DownloaderFunctionArnParameter
  S3ToSqsStateMachineArn:
    Description: ARN of the S3 to SQS processing Step Function
    Value: !Ref S3ToSqsStateMachine
  S3ToSqsStateMachineName:
    Description: Name of the S3 to SQS processing Step Function
    Value: !GetAtt S3ToSqsStateMachine.Name
  WorkflowQueueUrl:
    Description: URL of the workflow SQS queue (Step Functions trigger)
    Value: !Ref WorkflowSqsQueue
  WorkflowQueueArn:
    Description: ARN of the workflow SQS queue
    Value: !GetAtt WorkflowSqsQueue.Arn
  ElephantExpressStateMachineArn:
    Description: ARN of the Elephant Express state machine
    Value: !Ref ElephantExpressStateMachine
  ElephantExpressStateMachineName:
    Description: Name of the Elephant Express state machine
    Value: !GetAtt ElephantExpressStateMachine.Name
